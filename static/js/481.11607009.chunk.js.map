{"version":3,"file":"static/js/481.11607009.chunk.js","mappings":"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","sources":["components/CommonStyles.jsx","components/LoginForm/LoginForm.jsx","pages/Contacts/Contacts.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx","components/HomeSection/HomeSection.jsx","pages/Home.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  border-radius: 10px;\n  border: 1px solid grey;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 72px 16px 24px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  width: 400px;\n  height: auto;\n  background-color: #fff;\n\n  h2 {\n    margin: 0 0 50px 0;\n  }\n\n  h1 {\n    margin: 0 0 50px 0;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 40px;\n\n  button {\n    width: 100%;\n    min-width: 300px;\n    height: 40px;\n    border: 1px solid grey;\n    border-radius: 10px;\n    background-color: #6666ff;\n    color: white;\n    transition: background-color 250ms linear, color 250ms linear;\n\n    &:hover {\n      background-color: #9999ff;\n      color: #333333;\n    }\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 8px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  width: 100%;\n  min-width: 300px;\n  height: 40px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n`;\n\nexport const TextWrapper = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const NavLinkStyled = styled(NavLink)`\n  text-decoration: none;\n  color: #6666ff;\n  transition: color 250ms linear;\n\n  &:hover {\n    color: #9999ff;\n  }\n`;\n","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/opertaions';\nimport * as Yup from 'yup';\nimport {\n  Container,\n  Error,\n  NavLinkStyled,\n  StyledField,\n  StyledForm,\n  TextWrapper,\n} from 'components/CommonStyles';\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .trim()\n    .min(5, 'Too short email!')\n    .max(50, 'Too long email!')\n    .required('Required'),\n  password: Yup.string()\n    .trim()\n    .min(8, 'Too short password!')\n    .max(50, 'Too long password!')\n    .required('Required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmitForm = (values, helpers) => {\n    const { email, password } = values;\n\n    dispatch(logIn({ email, password }));\n    helpers.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={LoginSchema}\n      onSubmit={onSubmitForm}\n    >\n      <Container>\n        <StyledForm>\n          <h1>PHONEBOOK</h1>\n          <label>\n            <StyledField\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"off\"\n              placeholder=\"Email\"\n            />\n            <Error component=\"p\" name=\"email\" />\n          </label>\n          <label>\n            <StyledField\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"off\"\n              placeholder=\"Password\"\n            />\n            <Error component=\"p\" name=\"password\" />\n          </label>\n          <button type=\"submit\">Log in</button>\n          <TextWrapper>\n            <p>Don't have an account?</p>\n            <NavLinkStyled to=\"/register\">Signup</NavLinkStyled>\n          </TextWrapper>\n        </StyledForm>\n      </Container>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  border-radius: 10px;\n  border: 1px solid grey;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px 30px;\n  width: 400px;\n  max-height: 600px;\n  background-color: #fff;\n  overflow-y: auto;\n`;\n\nexport const NavBox = styled.nav`\n  display: flex;\n  align-items: center;\n\n  justify-content: space-between;\n  padding-bottom: 40px;\n`;\n\nexport const NavList = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const NavBtn = styled.button`\n  border: none;\n  background-color: transparent;\n`;\n","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContactFormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  max-width: 340px;\n  padding-bottom: 40px;\n`;\n\nexport const StyledContactField = styled(Field)`\n  padding: 8px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  width: 100%;\n  min-width: 300px;\n  height: 40px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n`;\n\nexport const ButtonForm = styled.button`\n  width: 306px;\n  height: 40px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #6666ff;\n  color: white;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover {\n    background-color: #9999ff;\n    color: #333333;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { Formik } from 'formik';\nimport {\n  ContactFormWrapper,\n  ButtonForm,\n  Error,\n  StyledContactField,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name format!'\n    )\n    .min(3, 'Too short contact name!')\n    .max(50, 'Too long contact name!')\n    .required('Required'),\n  number: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid phone number format!'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = (values, helpers) => {\n    if (contacts.some(contact => contact.name === values.name)) {\n      Notiflix.Notify.failure('This person already exists');\n      helpers.resetForm();\n      return;\n    }\n\n    dispatch(addContact(values));\n    helpers.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={onSubmitForm}\n    >\n      <ContactFormWrapper>\n        <label>\n          <StyledContactField\n            name=\"name\"\n            autoComplete=\"off\"\n            placeholder=\"Name\"\n            required\n          />\n          <Error component=\"p\" name=\"name\" />\n        </label>\n        <label>\n          <StyledContactField\n            type=\"tel\"\n            autoComplete=\"off\"\n            name=\"number\"\n            placeholder=\"Number\"\n            required\n          />\n          <Error component=\"p\" name=\"number\" />\n        </label>\n        <ButtonForm type=\"submit\">Add contact</ButtonForm>\n      </ContactFormWrapper>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  > input {\n    padding: 8px;\n    border: 1px solid grey;\n    border-radius: 10px;\n    width: 100%;\n    min-width: 300px;\n    height: 40px;\n  }\n`;\n","import { selectFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { FilterWrapper } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n        placeholder=\"Filter by name\"\n      />\n    </FilterWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactSection = styled.div`\n  padding: 40px 0;\n`;\n\nexport const ContactListWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 18px;\n  }\n`;\n\nexport const StyledSpan = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const ButtonDelete = styled.button`\n  max-width: 100px;\n  border-radius: 5px;\n  font-size: 14px;\n  padding: 6px 10px;\n  margin-left: 20px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #6666ff;\n  color: white;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover {\n    background-color: #9999ff;\n    color: #333333;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactListWrapper,\n  ButtonDelete,\n  ContactSection,\n  StyledSpan,\n} from './ContactList.styled';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { RxAvatar } from 'react-icons/rx';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ContactSection>\n      <h3>Contacts</h3>\n      <ContactListWrapper>\n        {filteredContacts.map(contact => (\n          <li key={contact.id}>\n            <StyledSpan>\n              <RxAvatar />\n              {contact.name}: {contact.number}\n            </StyledSpan>\n            <ButtonDelete onClick={() => dispatch(deleteContact(contact.id))}>\n              Delete\n            </ButtonDelete>\n          </li>\n        ))}\n      </ContactListWrapper>\n    </ContactSection>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { AppContainer, NavBox, NavBtn, NavList } from './Contacts.styled';\nimport { IoMdAdd } from 'react-icons/io';\nimport { FaSearch } from 'react-icons/fa';\nimport { MdLogout } from 'react-icons/md';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { logOut } from '../../redux/auth/opertaions';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const [addContactForm, setAddContactForm] = useState(false);\n  const [addFilter, setAddFilter] = useState(false);\n  const persistedContacts = useSelector(selectFilteredContacts);\n\n  const handleAddBtn = () => setAddContactForm(!addContactForm);\n  const handleFilterBtn = () => setAddFilter(!addFilter);\n  const handleLogoutBtn = () => dispatch(logOut());\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <AppContainer>\n        <div>\n          <NavBox>\n            <h3>Phonebook</h3>\n            <NavList>\n              <li>\n                <NavBtn type=\"button\" onClick={handleAddBtn}>\n                  <IoMdAdd size={30} />\n                </NavBtn>\n              </li>\n              <li>\n                <NavBtn type=\"button\" onClick={handleFilterBtn}>\n                  <FaSearch size={20} />\n                </NavBtn>\n              </li>\n              <li>\n                <NavBtn type=\"button\" onClick={handleLogoutBtn}>\n                  <MdLogout size={25} />\n                </NavBtn>\n              </li>\n            </NavList>\n          </NavBox>\n        </div>\n        {addContactForm && <ContactForm />}\n        {addFilter && <Filter />}\n        {persistedContacts.length > 0 ? (\n          <ContactList />\n        ) : (\n          <p>You don't have any contact yet</p>\n        )}\n      </AppContainer>\n    </main>\n  );\n}\n","import { useAuth } from 'hooks/useAuth';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport Contacts from 'pages/Contacts/Contacts';\n\nexport const HomeSection = () => {\n  const { isLoggedIn } = useAuth();\n\n  return <>{isLoggedIn ? <Contacts /> : <LoginForm />}</>;\n};\n","import { HomeSection } from 'components/HomeSection/HomeSection';\n\nexport default function Home() {\n  return <HomeSection />;\n}\n"],"names":["Container","styled","StyledForm","Form","StyledField","Field","Error","ErrorMessage","TextWrapper","NavLinkStyled","NavLink","LoginSchema","Yup","shape","email","trim","min","max","required","password","LoginForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","helpers","logIn","resetForm","type","name","autoComplete","placeholder","component","to","AppContainer","NavBox","NavList","NavBtn","ContactFormWrapper","StyledContactField","ButtonForm","selectFilter","state","filter","value","selectContacts","contacts","items","selectFilteredContacts","createSelector","contact","toLowerCase","includes","ContactSchema","matches","number","ContactForm","useSelector","some","Notiflix","addContact","FilterWrapper","Filter","onChange","evt","changeFilter","target","ContactSection","ContactListWrapper","StyledSpan","ButtonDelete","ContactList","filteredContacts","map","onClick","deleteContact","id","Contacts","useState","addContactForm","setAddContactForm","addFilter","setAddFilter","persistedContacts","useEffect","fetchContacts","size","logOut","length","HomeSection","isLoggedIn","useAuth","Home"],"sourceRoot":""}