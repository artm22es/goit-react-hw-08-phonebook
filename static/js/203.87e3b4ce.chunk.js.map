{"version":3,"file":"static/js/203.87e3b4ce.chunk.js","mappings":"6PAGaA,GAAqBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+RAmBlBE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,iFAMLI,EAAaJ,EAAAA,GAAAA,OAAH,+J,oBC1BVK,EAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,KAAjB,EAEpBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMI,SAASC,KAAnB,EAMtBC,GAAyBC,EAAAA,EAAAA,IACpC,CAACJ,EAAgBJ,IACjB,SAACK,EAAUH,GACT,OAAOG,EAASH,QAAO,SAAAO,GAAO,OAC5BA,EAAQC,KAAKC,oBAAoBC,SAASV,EAAOS,oBADrB,GAG/B,I,mBCRGE,EAAgBC,EAAAA,KAAaC,MAAM,CACvCL,KAAMI,EAAAA,KACHE,OACAC,QACC,yHACA,wBAEDC,IAAI,EAAG,2BACPC,IAAI,GAAI,0BACRC,SAAS,YACZC,MAAOP,EAAAA,KACJE,OACAC,QACC,6EACA,gCAEDG,SAAS,cAGDE,EAAc,WACzB,IAAMjB,GAAWkB,EAAAA,EAAAA,IAAYnB,GACvBoB,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEhB,KAAM,GAAIW,MAAO,IAClCM,iBAAkBd,EAClBe,SAfiB,SAACC,EAAQC,GAC5B,GAAIzB,EAAS0B,MAAK,SAAAtB,GAAO,OAAIA,EAAQC,OAASmB,EAAOnB,IAA5B,IAGvB,OAFAsB,IAAAA,OAAAA,QAAwB,mCACxBF,EAAQG,YAIVT,GAASU,EAAAA,EAAAA,IAAWL,IACpBC,EAAQG,WACT,EAGC,UAKE,UAACvC,EAAD,YACE,qCAEE,SAAC,KAAD,CAAOgB,KAAK,OAAOyB,aAAa,MAAMf,UAAQ,KAC9C,SAACvB,EAAD,CAAOuC,UAAU,IAAI1B,KAAK,aAE5B,sCAEE,SAAC,KAAD,CAAO2B,KAAK,MAAMF,aAAa,MAAMzB,KAAK,QAAQU,UAAQ,KAC1D,SAACvB,EAAD,CAAOuC,UAAU,IAAI1B,KAAK,cAE5B,SAACX,EAAD,CAAYsC,KAAK,SAAjB,6BAIP,EC7DYC,EAAqB3C,EAAAA,GAAAA,GAAH,kGAOlB4C,EAAe5C,EAAAA,GAAAA,OAAH,qLCJZ6C,EAAc,WACzB,IAAMC,GAAmBlB,EAAAA,EAAAA,IAAYhB,GAC/BiB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACa,EAAD,UACGG,EAAiBC,KAAI,SAAAjC,GAAO,OAC3B,0BACGA,EAAQC,KADX,KACmBD,EAAQY,OACzB,SAACkB,EAAD,CAAcI,QAAS,kBAAMnB,GAASoB,EAAAA,EAAAA,IAAcnC,EAAQoC,IAArC,EAAvB,sBAFOpC,EAAQoC,GADU,KAUlC,E,UCnBYC,EAAgBnD,EAAAA,GAAAA,IAAH,0KCGboD,EAAS,WACpB,IAAM7C,GAASqB,EAAAA,EAAAA,IAAYvB,GACrBwB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACqB,EAAD,6BAEE,kBACET,KAAK,OACL3B,KAAK,OACLP,MAAOD,EACP8C,SAAU,SAAAC,GAAG,OAAIzB,GAAS0B,EAAAA,EAAAA,GAAaD,EAAIE,OAAOhD,OAArC,MAIpB,E,UCbc,SAASiD,IACtB,IAAM5B,GAAWC,EAAAA,EAAAA,MAMjB,OAJA4B,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACV,GAAE,CAAC9B,KAGF,0BACE,6BACE,sCACA,SAACuB,EAAD,KACA,SAACP,EAAD,KACA,SAAClB,EAAD,QAIP,C","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { ErrorMessage, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContactFormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  > label {\n    font-size: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n\n    > input {\n      max-width: 200px;\n      height: 25px;\n      border-radius: 5px;\n    }\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 15px;\n  font-weight: bold;\n`;\n\nexport const ButtonForm = styled.button`\n  max-width: 100px;\n  border-radius: 5px;\n  font-size: 14px;\n  padding: 6px 10px;\n\n  &:hover {\n    background-color: gold;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  }\n);\n","import * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { Field, Formik } from 'formik';\nimport { ContactFormWrapper, ButtonForm, Error } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name format!'\n    )\n    .min(3, 'Too short contact name!')\n    .max(50, 'Too long contact name!')\n    .required('Required'),\n  phone: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid phone number format!'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = (values, helpers) => {\n    if (contacts.some(contact => contact.name === values.name)) {\n      Notiflix.Notify.failure('This person already exists');\n      helpers.resetForm();\n      return;\n    }\n\n    dispatch(addContact(values));\n    helpers.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={onSubmitForm}\n    >\n      <ContactFormWrapper>\n        <label>\n          Name\n          <Field name=\"name\" autoComplete=\"off\" required />\n          <Error component=\"p\" name=\"name\" />\n        </label>\n        <label>\n          Phone\n          <Field type=\"tel\" autoComplete=\"off\" name=\"phone\" required />\n          <Error component=\"p\" name=\"phone\" />\n        </label>\n        <ButtonForm type=\"submit\">Add contact</ButtonForm>\n      </ContactFormWrapper>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const ButtonDelete = styled.button`\n  max-width: 100px;\n  border-radius: 5px;\n  font-size: 14px;\n  padding: 6px 10px;\n  margin-left: 20px;\n\n  &:hover {\n    background-color: gold;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactListWrapper, ButtonDelete } from './ContactList.styled';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ContactListWrapper>\n      {filteredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.phone}\n          <ButtonDelete onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </ButtonDelete>\n        </li>\n      ))}\n    </ContactListWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  > input {\n    max-width: 200px;\n    height: 25px;\n    border-radius: 5px;\n  }\n`;\n","import { selectFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { FilterWrapper } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      Filter by name\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n      />\n    </FilterWrapper>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <main>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        <ContactForm />\n      </main>\n    </div>\n  );\n}\n"],"names":["ContactFormWrapper","styled","Form","Error","ErrorMessage","ButtonForm","selectFilter","state","filter","value","selectContacts","contacts","items","selectFilteredContacts","createSelector","contact","name","toLocaleLowerCase","includes","ContactSchema","Yup","shape","trim","matches","min","max","required","phone","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","helpers","some","Notiflix","resetForm","addContact","autoComplete","component","type","ContactListWrapper","ButtonDelete","ContactList","filteredContacts","map","onClick","deleteContact","id","FilterWrapper","Filter","onChange","evt","changeFilter","target","Contacts","useEffect","fetchContacts"],"sourceRoot":""}