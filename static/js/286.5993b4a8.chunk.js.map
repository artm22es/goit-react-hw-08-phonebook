{"version":3,"file":"static/js/286.5993b4a8.chunk.js","mappings":"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","sources":["pages/Contacts/Contacts.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  border-radius: 10px;\n  border: 1px solid grey;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 20px 30px;\n  width: 400px;\n  max-height: 600px;\n  background-color: #fff;\n  overflow-y: auto;\n`;\n\nexport const NavBox = styled.nav`\n  display: flex;\n  align-items: center;\n\n  justify-content: space-between;\n  padding-bottom: 40px;\n`;\n\nexport const NavList = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const NavBtn = styled.button`\n  border: none;\n  background-color: transparent;\n`;\n","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContactFormWrapper = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  max-width: 340px;\n  padding-bottom: 40px;\n`;\n\nexport const StyledContactField = styled(Field)`\n  padding: 8px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  width: 100%;\n  min-width: 300px;\n  height: 40px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n`;\n\nexport const ButtonForm = styled.button`\n  width: 306px;\n  height: 40px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #6666ff;\n  color: white;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover {\n    background-color: #9999ff;\n    color: #333333;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { Formik } from 'formik';\nimport {\n  ContactFormWrapper,\n  ButtonForm,\n  Error,\n  StyledContactField,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Invalid name format!'\n    )\n    .min(3, 'Too short contact name!')\n    .max(50, 'Too long contact name!')\n    .required('Required'),\n  number: Yup.string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Invalid phone number format!'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = (values, helpers) => {\n    if (contacts.some(contact => contact.name === values.name)) {\n      Notiflix.Notify.failure('This person already exists');\n      helpers.resetForm();\n      return;\n    }\n\n    dispatch(addContact(values));\n    helpers.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={onSubmitForm}\n    >\n      <ContactFormWrapper>\n        <label>\n          <StyledContactField\n            name=\"name\"\n            autoComplete=\"off\"\n            placeholder=\"Name\"\n            required\n          />\n          <Error component=\"p\" name=\"name\" />\n        </label>\n        <label>\n          <StyledContactField\n            type=\"tel\"\n            autoComplete=\"off\"\n            name=\"number\"\n            placeholder=\"Number\"\n            required\n          />\n          <Error component=\"p\" name=\"number\" />\n        </label>\n        <ButtonForm type=\"submit\">Add contact</ButtonForm>\n      </ContactFormWrapper>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  > input {\n    padding: 8px;\n    border: 1px solid grey;\n    border-radius: 10px;\n    width: 100%;\n    min-width: 300px;\n    height: 40px;\n  }\n`;\n","import { selectFilter } from '../../redux/contacts/selectors';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { FilterWrapper } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={filter}\n        onChange={evt => dispatch(changeFilter(evt.target.value))}\n        placeholder=\"Filter by name\"\n      />\n    </FilterWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactSection = styled.div`\n  padding: 40px 0;\n`;\n\nexport const ContactListWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 18px;\n  }\n`;\n\nexport const StyledSpan = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const ButtonDelete = styled.button`\n  max-width: 100px;\n  border-radius: 5px;\n  font-size: 14px;\n  padding: 6px 10px;\n  margin-left: 20px;\n  border: 1px solid grey;\n  border-radius: 10px;\n  background-color: #6666ff;\n  color: white;\n  transition: background-color 250ms linear, color 250ms linear;\n\n  &:hover {\n    background-color: #9999ff;\n    color: #333333;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ContactListWrapper,\n  ButtonDelete,\n  ContactSection,\n  StyledSpan,\n} from './ContactList.styled';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { RxAvatar } from 'react-icons/rx';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ContactSection>\n      <h3>Contacts</h3>\n      <ContactListWrapper>\n        {filteredContacts.map(contact => (\n          <li key={contact.id}>\n            <StyledSpan>\n              <RxAvatar />\n              {contact.name}: {contact.number}\n            </StyledSpan>\n            <ButtonDelete onClick={() => dispatch(deleteContact(contact.id))}>\n              Delete\n            </ButtonDelete>\n          </li>\n        ))}\n      </ContactListWrapper>\n    </ContactSection>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { AppContainer, NavBox, NavBtn, NavList } from './Contacts.styled';\nimport { IoMdAdd } from 'react-icons/io';\nimport { FaSearch } from 'react-icons/fa';\nimport { MdLogout } from 'react-icons/md';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { logOut } from '../../redux/auth/opertaions';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const [addContactForm, setAddContactForm] = useState(false);\n  const [addFilter, setAddFilter] = useState(false);\n  const persistedContacts = useSelector(selectFilteredContacts);\n\n  const handleAddBtn = () => setAddContactForm(!addContactForm);\n  const handleFilterBtn = () => setAddFilter(!addFilter);\n  const handleLogoutBtn = () => dispatch(logOut());\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <AppContainer>\n        <div>\n          <NavBox>\n            <h3>Phonebook</h3>\n            <NavList>\n              <li>\n                <NavBtn type=\"button\" onClick={handleAddBtn}>\n                  <IoMdAdd size={30} />\n                </NavBtn>\n              </li>\n              <li>\n                <NavBtn type=\"button\" onClick={handleFilterBtn}>\n                  <FaSearch size={20} />\n                </NavBtn>\n              </li>\n              <li>\n                <NavBtn type=\"button\" onClick={handleLogoutBtn}>\n                  <MdLogout size={25} />\n                </NavBtn>\n              </li>\n            </NavList>\n          </NavBox>\n        </div>\n        {addContactForm && <ContactForm />}\n        {addFilter && <Filter />}\n        {persistedContacts.length > 0 ? (\n          <ContactList />\n        ) : (\n          <p>You don't have any contact yet</p>\n        )}\n      </AppContainer>\n    </main>\n  );\n}\n"],"names":["AppContainer","styled","NavBox","NavList","NavBtn","ContactFormWrapper","Form","StyledContactField","Field","Error","ErrorMessage","ButtonForm","selectFilter","state","filter","value","selectContacts","contacts","items","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactSchema","Yup","shape","trim","matches","min","max","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","helpers","some","Notiflix","resetForm","addContact","autoComplete","placeholder","component","type","FilterWrapper","Filter","onChange","evt","changeFilter","target","ContactSection","ContactListWrapper","StyledSpan","ButtonDelete","ContactList","filteredContacts","map","onClick","deleteContact","id","Contacts","useState","addContactForm","setAddContactForm","addFilter","setAddFilter","persistedContacts","useEffect","fetchContacts","size","logOut","length"],"sourceRoot":""}